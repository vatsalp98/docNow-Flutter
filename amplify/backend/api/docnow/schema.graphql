type User @model
  @auth(rules: [
    { allow: groups, groups: ["admin"] },
    { allow: public, operations: [read, create] },
    { allow: private, operations: [read, create, update, delete] }
  ])
{
  id: ID!
  full_name: String!
  email: String!
  gender: String
  birthday: AWSDateTime
  isDoctor: Boolean!
  expertise: [String]
  isSpecialist: Boolean
  location: String
  serviceLanguages: [String]
  clinic_id: ID
  activeHours_id: ID
  clinic: [Clinic] @hasMany(fields: ["clinic_id"])
  schedule: ActiveHours @hasOne(fields: ["activeHours_id"])
}

type Booking @model 
  @auth(rules: [
    { allow: groups, groups: ["admin"] },
    { allow: public, operations: [read, create] },
    { allow: private, operations: [read, create, update, delete] }
  ])
{
  id: ID!
  doctor_id: ID!
  patient_id: ID
  clinic_id: ID!
  booking_date: AWSDateTime!
  booking_time: AWSDateTime!
  description: String
  categories: [String]
  location: String
  isActive: Boolean!
  clinic: Clinic @hasOne(fields: ["clinic_id"])
  user: User @hasOne(fields: ["doctor_id"])
}

type Clinic @model 
  @auth(rules: [
    { allow: groups, groups: ["admin"] },
    { allow: public, operations: [read, create] },
    { allow: private, operations: [read, create, update, delete] }
  ]) 
{
  id: ID!
  name: String!
  location: String!
  services: [String]
  serviceLanguages: [String]
}

type ActiveHours @model 
  @auth(rules: [
    { allow: groups, groups: ["admin"] },
    { allow: public, operations: [read, create, update] },
    { allow: private, operations: [read, create, update, delete] }
  ]) 
{
  id: ID!
  user_id: ID!
  date: AWSDateTime!
  startTime: AWSDateTime
  endTime: AWSDateTime
  totalSlots: Int!
  weekNumber: Int!
  user: User @hasOne (fields: ["user_id"])
}


